{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx","questions.tsx"],"names":["Question","question","answers","map","answer","key","type","value","name","id","htmlFor","App","questionAndAnswers","useState","currentQuestionAndAnswers","setCurrentQuestionAndAnswsers","Object","keys","answsers","className","onSubmit","event","preventDefault","answerElt","currentTarget","Boolean","window","location","hostname","match","ReactDOM","render","Autre","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8KAwCA,SAASA,EAAT,GAMI,IALFC,EAKC,EALDA,SACAC,EAIC,EAJDA,QAKA,OACE,6BACE,2BAAID,GACHC,EAAQC,KAAI,SAAAC,GAAM,OACjB,oCACE,2BAAOC,IAAK,SAAWD,EAAQE,KAAK,QAAQC,MAAOH,EAAQI,KAAK,SAASC,GAAIL,IAC7E,2BAAOC,IAAK,SAASD,EAAQM,QAASN,GAASA,QAO1CO,MApDmD,SAAC,GAE5D,IADLC,EACI,EADJA,mBACI,EAC+DC,mBACjED,GAFE,mBACGE,EADH,KAC8BC,EAD9B,KAIJ,GAAkC,OAA9BD,EACF,OAAO,oEAET,IAAMb,EAAWe,OAAOC,KAAKH,GAA2B,GAClDI,EAAWF,OAAOC,KAAKH,EAA0Bb,IACvD,OACE,yBAAKkB,UAAU,OACb,0CACA,0BAAMC,SASV,SAAkBC,GAChBA,EAAMC,iBACN,IAAMC,EAAYF,EAAMG,cAAN,OAClBT,EAA8BD,EAA0Bb,GACtDsB,EAAUhB,UAZR,kBAACP,EAAD,CAAUC,SAAUA,EAAUC,QAASgB,IACvC,6BACE,2BAAOZ,KAAK,SAASC,MAAM,WCbjBkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,CAAKnB,mBCPI,CACvB,uBAAwB,CACtB,WAAY,CACV,iDAAkD,CAChD,WAAY,KACZ,YAAa,OAGjB,WAAY,CACR,uCAAwC,CACtC,0BAA2B,CACzB,eAAgB,CACd,SAAU,KACV,SAAU,KACV,SAAU,OAGd,oBAAqB,KACrB,IAAO,KACPoB,MAAO,uBDZuCC,SAASC,eAAe,SDkI1E,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.43ee4ee3.chunk.js","sourcesContent":["import React, { FormEvent, useState, SyntheticEvent } from \"react\";\n\ninterface QuestionAndAnswers {\n  [question: string]: {\n    [answser: string]: QuestionAndAnswers | string | null;\n  };\n}\n\nconst App: React.FC<{ questionAndAnswers: QuestionAndAnswers }> = ({\n  questionAndAnswers\n}) => {\n  const [currentQuestionAndAnswers, setCurrentQuestionAndAnswsers] = useState(\n    questionAndAnswers\n  );\n  if (currentQuestionAndAnswers === null) {\n    return <p>Merci d'avoir rempli le questionnaire</p>;\n  }\n  const question = Object.keys(currentQuestionAndAnswers)[0];\n  const answsers = Object.keys(currentQuestionAndAnswers[question]);\n  return (\n    <div className=\"App\">\n      <h1>Hello form</h1>\n      <form onSubmit={onSubmit}>\n        <Question question={question} answers={answsers} />\n        <div>\n          <input type=\"submit\" value=\"Ok\" />\n        </div>\n      </form>\n    </div>\n  );\n\n  function onSubmit(event: FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n    const answerElt = event.currentTarget[\"answer\"] as HTMLInputElement;\n    setCurrentQuestionAndAnswsers(currentQuestionAndAnswers[question][\n      answerElt.value\n    ] as QuestionAndAnswers);\n  }\n};\n\nfunction Question({\n  question,\n  answers\n}: {\n  question: string;\n  answers: string[];\n}) {\n  return (\n    <div>\n      <p>{question}</p>\n      {answers.map(answer => (\n        <>\n          <input key={\"answer\" + answer} type=\"radio\" value={answer} name=\"answer\" id={answer} />\n          <label key={\"label_\"+answer} htmlFor={answer}>{answer}</label>\n        </>\n      ))}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {questions} from './questions'\n\nReactDOM.render(<App questionAndAnswers={questions} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const questions = {\n  \"Comment allez-vous ?\": {\n    \"Au Top !\": {\n      \"Cool, qu'est-ce qui fait que tu es au top :) ?\": {\n        \"Le perso\": null,\n        \"Le boulot\": null\n      }\n    },\n    \"Pas glop\": {\n        \"Arf, on peut te soutenir / t'aider ?\": {\n          \"Oui avec du financement\": {\n            \"De combien ?\": {\n              \"< 1000\": null,\n              \"< 5000\": null,\n              \"> 5000\": null\n            }\n          },\n          \"Oui avec du temps\": null,\n          \"Non\": null,\n          Autre: \"__text_input__\"\n        }\n      }\n  }\n};\n"],"sourceRoot":""}